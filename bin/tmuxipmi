#! /bin/env python
from osutils import OSNode
import argparse
import sys
import os

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='open ironic serial consoles in tmux')
    parser.add_argument('pattern', metavar='pattern',
                        help='pattern to apply to server names')
    parser.add_argument('--all-projects', dest='all',
                        action='store_true',
                        help='search all projects (requires admin credentials)'
                        )
    parser.set_defaults(all=True)
    args = parser.parse_args()

    sess_name = args.pattern
    search_opts = {}
    if args.all:
        search_opts['all_tenants'] = 1

    os.popen('tmux kill-session -t %s' % sess_name)

    servers = sorted(
        OSNode.filter_by_server_name(sess_name, '.driver_info.ipmi_address', search_opts=search_opts),
        key=lambda d: d.get('key')
    )
    for index, item in enumerate(servers):
        server_name, node_ip = item.get('key'), item.get('value')
        print('Opening tmux window:', server_name)
        for fn in ['deactivate', 'activate']:
            ipmi_cmd = "ipmitool -I lanplus -H %s -U root -P calvin sol %s" % (node_ip, fn)
            if fn == 'activate':
                print(ipmi_cmd)
                if index == 0:
                    os.popen('tmux new-session -d -s %s -n %s "%s"' % (sess_name, server_name, ipmi_cmd))
                else:
                    os.popen('tmux new-window -d -t %s:%s -n %s "%s"' % (sess_name, index+1, server_name, ipmi_cmd))
            else:
                os.popen(ipmi_cmd)
    os.popen('tmux attach-session -t %s' % sess_name)
